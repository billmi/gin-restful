package models

import "fmt"

type UserAccount struct {
	UserId         int64  `gorm:"column:userId;type:bigint(20)" json:"user_id"`
	UserName       string `gorm:"column:userName;type:varchar(64)" json:"user_name"`
	Password       string `gorm:"column:password;type:varchar(64)" json:"password"`             // 登录密码，MD5值
	LogErrTimes    int    `gorm:"column:logErrTimes;type:int(11)" json:"log_err_times"`         // 连续登陆错误次数
	Status         int8   `gorm:"column:status;type:tinyint(4)" json:"status"`                  // 默认1,1表示正常，0表示失效，2表示异常，3禁用
	LastLoginTime  string `gorm:"column:lastLoginTime;type:datetime" json:"last_login_time"`    // 最后一次登陆时间
	FirstLoginTime string `gorm:"column:firstLoginTime;type:datetime" json:"first_login_time"`  // 第一次登录时间
	RegTime        string `gorm:"column:regTime;type:datetime" json:"reg_time"`                 // 注册时间
	RegFrom        string `gorm:"column:regFrom;type:varchar(50);default:null" json:"reg_from"` // 注册来源
	RegFromBizId   string `gorm:"column:regFromBizId;type:varchar(16)" json:"reg_from_biz_id"`  // 用户注册的业务来源:android，ios，web
	CreateTime     string `gorm:"column:createTime;type:datetime;default:CURRENT_TIMESTAMP" json:"create_time"`
	UpdateTime     string `gorm:"column:updateTime;type:datetime;default:CURRENT_TIMESTAMP" json:"update_time"` // 更新时间
	ProcessType    string `gorm:"column:processType;type:varchar(255);default:''" json:"process_type"`
	ProcessTime    string `gorm:"column:processTime;type:datetime;default:null" json:"process_time"`
	Equipment      string `gorm:"column:equipment;type:varchar(100);default:null" json:"equipment"`
	RegImei        string `gorm:"column:regImei;type:varchar(64);default:''" json:"reg_imei"` // 注册的imei号
	MiniappId      int64  `gorm:"column:miniappId;type:bigint(20);default:'0'" json:"miniapp_id"`
}

//get real primary key name
func (userAccount *UserAccount) GetKey() string {
	return "userId"
}

//get primary key in model
func (userAccount *UserAccount) GetKeyProperty() int64 {
	return userAccount.UserId
}

//set primary key
func (userAccount *UserAccount) SetKeyProperty(id int64) {
	userAccount.UserId = id
}

//get real table name
func (userAccount *UserAccount) TableName() string {
	return "user_account"
}

func (userAccount *UserAccount) GetById(id string) {
	Orm.Table(userAccount.TableName()).First(userAccount, userAccount.GetKey()+" = '"+id+"'")
}

func (userAccount *UserAccount) GetList(page, limit int64, condition string) (list []*UserAccount) {
	err := Orm.Model(userAccount).Limit(limit).Offset((page-1)*limit).Find(list, condition).GetErrors()
	if err != nil {
		return nil
	}
	return
}

func (userAccount *UserAccount) Create() []error {
	return Orm.Model(userAccount).Create(userAccount).GetErrors()
}

func (userAccount *UserAccount) Update(info UserAccount) []error {
	return Orm.Model(userAccount).UpdateColumns(info).GetErrors()
}

func (userAccount *UserAccount) Delete() {
	Orm.Model(userAccount).Delete(userAccount)
}

//get real primary key name
func (userAccount *UserAccount) IsRegister() bool {
	e := Orm.Raw(fmt.Sprintf(`select * FROM %s where userName = ?`, userAccount.TableName()), userAccount.UserName).First(&userAccount).GetErrors()
	if len(e) > 0 {
		return false
	}
	//fmt.Println(Orm.Raw(`select userId from  where userName = '?'`, userAccount.TableName(), userAccount.UserName).QueryExpr())
	return userAccount.UserId > 0
}
